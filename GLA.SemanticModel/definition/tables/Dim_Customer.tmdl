table Dim_Customer
	lineageTag: 25f029b1-dd30-4aca-9f11-549fbe92867d

	column id
		dataType: string
		lineageTag: e3573f35-a40e-4089-8487-df4a0e54bc98
		summarizeBy: none
		sourceColumn: id

		annotation SummarizationSetBy = Automatic

	column name
		dataType: string
		lineageTag: 35230ea6-72fe-4705-a013-e6e5f20bbb28
		summarizeBy: none
		sourceColumn: name

		annotation SummarizationSetBy = Automatic

	column company_id
		dataType: int64
		formatString: 0
		lineageTag: 2ea696d8-dd5b-422d-b8c9-868b8261a8cb
		summarizeBy: sum
		sourceColumn: company_id

		annotation SummarizationSetBy = Automatic

	column company_name
		dataType: string
		lineageTag: 07c16ade-8ccd-4d46-95dd-064d247b4532
		summarizeBy: none
		sourceColumn: company_name

		annotation SummarizationSetBy = Automatic

	column vat_rate
		dataType: string
		lineageTag: 4f7298fa-b08f-4b21-ada5-03a90912aa68
		summarizeBy: none
		sourceColumn: vat_rate

		annotation SummarizationSetBy = Automatic

	column plan_item_number
		dataType: string
		lineageTag: 4505d118-b4b6-4c46-a10e-eceab4a28a9a
		summarizeBy: none
		sourceColumn: plan_item_number

		annotation SummarizationSetBy = Automatic

	column pnl_plan_item_number
		dataType: string
		lineageTag: bd7e3e30-f655-4d50-9074-64a41f0647ed
		summarizeBy: none
		sourceColumn: pnl_plan_item_number

		annotation SummarizationSetBy = Automatic

	column postal_code
		dataType: string
		lineageTag: 4a9d97a1-d9fc-42b0-83ca-0987f1e85d60
		summarizeBy: none
		sourceColumn: postal_code

		annotation SummarizationSetBy = Automatic

	column country_alpha2
		dataType: string
		lineageTag: 61080663-bb22-4dd3-add7-43e8f2a130cd
		summarizeBy: none
		sourceColumn: country_alpha2

		annotation SummarizationSetBy = Automatic

	column city
		dataType: string
		lineageTag: 68764a6e-51b2-4a61-9c2b-66ad483463b7
		summarizeBy: none
		sourceColumn: city

		annotation SummarizationSetBy = Automatic

	column registration_number
		dataType: string
		lineageTag: 9ef569f8-d9f1-4e62-9496-e63cd1de2f0c
		summarizeBy: none
		sourceColumn: registration_number

		annotation SummarizationSetBy = Automatic

	column vat_number
		dataType: string
		lineageTag: d1d15417-79ee-4322-b0be-f61bf26ce630
		summarizeBy: none
		sourceColumn: vat_number

		annotation SummarizationSetBy = Automatic

	column activity_code
		dataType: string
		lineageTag: cf2eae8d-6aed-443b-a0bf-c3cddd3c570b
		summarizeBy: none
		sourceColumn: activity_code

		annotation SummarizationSetBy = Automatic

	column legal_name
		dataType: string
		lineageTag: ce49c4bc-3805-4096-b1c8-46c03c35acd9
		summarizeBy: none
		sourceColumn: legal_name

		annotation SummarizationSetBy = Automatic

	column registration_country_alpha2
		dataType: string
		lineageTag: d9962f19-d4e6-4924-8bbe-d8051f7c525e
		summarizeBy: none
		sourceColumn: registration_country_alpha2

		annotation SummarizationSetBy = Automatic

	column synchronized_at
		dataType: dateTime
		formatString: General Date
		lineageTag: ac0ffb61-d0c6-42c4-97b5-385c97f1ef78
		summarizeBy: none
		sourceColumn: synchronized_at

		variation Variation
			isDefault
			relationship: 795b352f-d21f-4202-83b2-3647864e8ff7
			defaultHierarchy: LocalDateTable_6e7cc737-29aa-4371-9066-990da6fe3ad8.'Hiérarchie de dates'

		annotation SummarizationSetBy = Automatic

	column deleted_at
		dataType: dateTime
		formatString: General Date
		lineageTag: 0fe4af09-4c0d-4e35-ac80-c91b6ebbb166
		summarizeBy: none
		sourceColumn: deleted_at

		variation Variation
			isDefault
			relationship: 675c89b2-c7cb-4e8e-b689-113781962679
			defaultHierarchy: LocalDateTable_433991e1-3312-4941-8379-8940ceddb87b.'Hiérarchie de dates'

		annotation SummarizationSetBy = Automatic

	column city_clean
		dataType: string
		lineageTag: 30a0dbe5-2456-457d-99f1-806d3e4bf67d
		summarizeBy: none
		sourceColumn: city_clean

		annotation SummarizationSetBy = Automatic

	partition Dim_Customer = m
		mode: import
		queryGroup: 'no loading'
		source = ```
				let
				    Redshift = AmazonRedshift.Database(
				        "pennylane-external.csqwamh5pldr.eu-west-1.redshift.amazonaws.com",
				        "prod"
				    ),
				    Source = Value.NativeQuery(
				        Redshift,
				        "
				        SELECT *
				        FROM etl.customers
				        WHERE company_id IN (
				            21912624, 21915510, 22276641, 21917322, 21918011
				        )
				        "
				    ),
				    #"Type modifié" = Table.TransformColumnTypes(Source, {{"id", type text}}),
				    #"Name normalisé" = Table.TransformColumns(
				        #"Type modifié",
				        {{"name", each Text.Proper(Text.Lower(_)), type text}}
				    ),
				 
				    RemoveDiacritics = (u as text) as text =>
				        let
				            charMap = {
				                {"à","a"},{"á","a"},{"â","a"},{"ã","a"},{"ä","a"},{"å","a"},
				                {"ç","c"},
				                {"è","e"},{"é","e"},{"ê","e"},{"ë","e"},
				                {"ì","i"},{"í","i"},{"î","i"},{"ï","i"},
				                {"ñ","n"},
				                {"ò","o"},{"ó","o"},{"ô","o"},{"õ","o"},{"ö","o"},{"ø","o"},
				                {"ù","u"},{"ú","u"},{"û","u"},{"ü","u"},
				                {"ý","y"},{"ÿ","y"},
				                {"œ","oe"},{"æ","ae"}
				            },
				            res = List.Accumulate(charMap, u, (state, pair) => Text.Replace(state, pair{0}, pair{1}))
				        in res,
				 
				    fxCleanCity = (t as nullable text) as nullable text =>
				        let
				            s0 = if t = null then null else Text.Trim(Text.From(t)),
				            s1 = if s0 = null or s0 = "" or s0 = "-" or s0 = "0" then null else s0,
				            s2 = if s1 = null then null else
				                    Text.Replace(Text.Replace(Text.Replace(Text.Replace(Text.Replace(s1, "_", " "), "’", "'"), "–", "-"), "—", "-"), "‐", "-"),
				            s3 = if s2 = null then null else Text.Combine(List.Select(Text.Split(s2, " "), each _ <> ""), " "),
				            lower = if s3 = null then null else Text.Lower(s3),
				 
				            lowerA =
				                if lower = null then null else
				                let
				                    a = if Text.StartsWith(lower, "st ") then "saint " & Text.Range(lower, 3) else lower,
				                    b = if Text.StartsWith(a, "ste ") then "sainte " & Text.Range(a, 4) else a,
				                    c = Text.Replace(Text.Replace(Text.Replace(Text.Replace(b, " st-", " saint-"), "-st-", "-saint-"), " ste-", " sainte-"), "-ste-", "-sainte-")
				                in  c,
				 
				            noAcc = if lowerA = null then null else RemoveDiacritics(lowerA),
				 
				            pairs = {
				                {"cap town","cape town"},
				                {"pay bas","pays bas"},
				                {"saint mande","saint mande"},
				                {"saint herblain","saint herblain"},
				                {"saint brieuc","saint brieuc"},
				                {"saint pere","saint pere"},
				                {"saint emilion","saint emilion"},
				                {"chalon sur saone","chalon sur saone"},
				                {"grandchamp des fontaines","grandchamp des fontaines"},
				                {"la roche jaudy","la roche jaudy"}
				            },
				            std = if noAcc = null then null else List.Accumulate(pairs, noAcc, (state, pair) => Text.Replace(state, pair{0}, pair{1})),
				 
				            hyphenParts = if std = null then null else Text.Split(std, "-"),
				            hyphenTrimmed = if hyphenParts = null then null else List.Transform(hyphenParts, each Text.Trim(_)),
				            s4 = if hyphenTrimmed = null then null else Text.Combine(hyphenTrimmed, " "),
				 
				            s5 =
				                if s4 = null then null
				                else if Text.StartsWith(s4, "paris ") then "paris"
				                else if Text.StartsWith(s4, "lyon ") then "lyon"
				                else s4,
				 
				            s6 = if s5 = null then null else Text.Combine(List.Select(Text.Split(s5, " "), each _ <> ""), " "),
				            result = if s6 = null then null else Text.Proper(s6)
				        in
				            result,
				 
				    #"City clean" = Table.AddColumn(#"Name normalisé", "city_clean", each fxCleanCity([city]), type text),
				    #"Capitalized Each Word" = Table.TransformColumns(#"City clean",{{"city", Text.Proper, type text}})
				in
				    #"Capitalized Each Word"
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Exception

